
Day09_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015fc  080015fc  00003058  2**0
                  CONTENTS
  4 .ARM          00000008  080015fc  080015fc  000025fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001604  08001604  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001604  08001604  00002604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800160c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003058  2**0
                  CONTENTS
 10 .bss          0000017c  20000058  20000058  00003058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00003058  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e8a  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009a3  00000000  00000000  00004f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  000058b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000123  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881e  00000000  00000000  00005b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002629  00000000  00000000  0001e3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c5a7  00000000  00000000  000209ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000acf71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009b4  00000000  00000000  000acfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ad968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  000ad987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001570 	.word	0x08001570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08001570 	.word	0x08001570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LedInit>:
#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000278:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <LedInit+0xb8>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a2a      	ldr	r2, [pc, #168]	@ (8000328 <LedInit+0xb8>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000284:	4b29      	ldr	r3, [pc, #164]	@ (800032c <LedInit+0xbc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	0052      	lsls	r2, r2, #1
 800028c:	3201      	adds	r2, #1
 800028e:	2101      	movs	r1, #1
 8000290:	fa01 f202 	lsl.w	r2, r1, r2
 8000294:	43d2      	mvns	r2, r2
 8000296:	4611      	mov	r1, r2
 8000298:	4a24      	ldr	r2, [pc, #144]	@ (800032c <LedInit+0xbc>)
 800029a:	400b      	ands	r3, r1
 800029c:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 800029e:	4b23      	ldr	r3, [pc, #140]	@ (800032c <LedInit+0xbc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a1f      	ldr	r2, [pc, #124]	@ (800032c <LedInit+0xbc>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	6013      	str	r3, [r2, #0]
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002b4:	4b1d      	ldr	r3, [pc, #116]	@ (800032c <LedInit+0xbc>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	3201      	adds	r2, #1
 80002be:	2101      	movs	r1, #1
 80002c0:	4091      	lsls	r1, r2
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	2001      	movs	r0, #1
 80002c8:	fa00 f202 	lsl.w	r2, r0, r2
 80002cc:	430a      	orrs	r2, r1
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a16      	ldr	r2, [pc, #88]	@ (800032c <LedInit+0xbc>)
 80002d4:	400b      	ands	r3, r1
 80002d6:	6093      	str	r3, [r2, #8]
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <LedInit+0xbc>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	0052      	lsls	r2, r2, #1
 80002e0:	3201      	adds	r2, #1
 80002e2:	2101      	movs	r1, #1
 80002e4:	4091      	lsls	r1, r2
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	0052      	lsls	r2, r2, #1
 80002ea:	2001      	movs	r0, #1
 80002ec:	fa00 f202 	lsl.w	r2, r0, r2
 80002f0:	430a      	orrs	r2, r1
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LedInit+0xbc>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	60d3      	str	r3, [r2, #12]
	LED_GPIO->OTYPER &= ~BV(pin);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <LedInit+0xbc>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	2101      	movs	r1, #1
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	43d2      	mvns	r2, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a07      	ldr	r2, [pc, #28]	@ (800032c <LedInit+0xbc>)
 800030e:	400b      	ands	r3, r1
 8000310:	6053      	str	r3, [r2, #4]
	LED_GPIO->BSRR = BV(pin + 16);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3310      	adds	r3, #16
 8000316:	2201      	movs	r2, #1
 8000318:	409a      	lsls	r2, r3
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <LedInit+0xbc>)
 800031c:	619a      	str	r2, [r3, #24]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800
 800032c:	40020c00 	.word	0x40020c00

08000330 <LedOn>:

void LedOn(uint32_t pin)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	LED_GPIO->BSRR = BV(pin);
 8000338:	2201      	movs	r2, #1
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	409a      	lsls	r2, r3
 800033e:	4b03      	ldr	r3, [pc, #12]	@ (800034c <LedOn+0x1c>)
 8000340:	619a      	str	r2, [r3, #24]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40020c00 	.word	0x40020c00

08000350 <LedOff>:

void LedOff(uint32_t pin)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	LED_GPIO->BSRR = BV(pin + 16);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3310      	adds	r3, #16
 800035c:	2201      	movs	r2, #1
 800035e:	409a      	lsls	r2, r3
 8000360:	4b03      	ldr	r3, [pc, #12]	@ (8000370 <LedOff+0x20>)
 8000362:	619a      	str	r2, [r3, #24]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40020c00 	.word	0x40020c00

08000374 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800037c:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <DelayMs+0x44>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <DelayMs+0x48>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <DelayMs+0x4c>)
 8000388:	fba2 2303 	umull	r2, r3, r2, r3
 800038c:	099b      	lsrs	r3, r3, #6
 800038e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800039a:	bf00      	nop
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <DelayMs+0x44>)
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1ad2      	subs	r2, r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d3f8      	bcc.n	800039c <DelayMs+0x28>
}
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	3714      	adds	r7, #20
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e0001000 	.word	0xe0001000
 80003bc:	20000000 	.word	0x20000000
 80003c0:	10624dd3 	.word	0x10624dd3

080003c4 <LIS_WriteIO>:
 */

#include "lis3dsh.h"

void LIS_WriteIO(uint8_t reg, uint8_t data[], uint8_t size)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	6039      	str	r1, [r7, #0]
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
	SPI_CS_Enable();
 80003d4:	f000 fa92 	bl	80008fc <SPI_CS_Enable>
	SPI_Transmit(reg);
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fa5c 	bl	8000898 <SPI_Transmit>
	for(int i=0; i<size; i++)
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e009      	b.n	80003fa <LIS_WriteIO+0x36>
		SPI_Transmit(data[i]);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	683a      	ldr	r2, [r7, #0]
 80003ea:	4413      	add	r3, r2
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fa52 	bl	8000898 <SPI_Transmit>
	for(int i=0; i<size; i++)
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	79bb      	ldrb	r3, [r7, #6]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf1      	blt.n	80003e6 <LIS_WriteIO+0x22>
	SPI_CS_Disable();
 8000402:	f000 fa87 	bl	8000914 <SPI_CS_Disable>
}
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <LIS_ReadIO>:

void LIS_ReadIO(uint8_t reg, uint8_t data[], uint8_t size)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b084      	sub	sp, #16
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	6039      	str	r1, [r7, #0]
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	4613      	mov	r3, r2
 800041c:	71bb      	strb	r3, [r7, #6]
	reg |= BV(7);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000424:	71fb      	strb	r3, [r7, #7]
	SPI_CS_Enable();
 8000426:	f000 fa69 	bl	80008fc <SPI_CS_Enable>
	SPI_Transmit(reg);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fa33 	bl	8000898 <SPI_Transmit>
	for(int i=0; i<size; i++)
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	e00b      	b.n	8000450 <LIS_ReadIO+0x42>
		data[i] = SPI_Receive();
 8000438:	f000 fa52 	bl	80008e0 <SPI_Receive>
 800043c:	4603      	mov	r3, r0
 800043e:	4619      	mov	r1, r3
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	4413      	add	r3, r2
 8000446:	b2ca      	uxtb	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	429a      	cmp	r2, r3
 8000456:	dbef      	blt.n	8000438 <LIS_ReadIO+0x2a>
	SPI_CS_Disable();
 8000458:	f000 fa5c 	bl	8000914 <SPI_CS_Disable>
}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <LIS_Init>:

void LIS_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	SPI_Init();
 800046a:	f000 f991 	bl	8000790 <SPI_Init>
	DelayMs(3);
 800046e:	2003      	movs	r0, #3
 8000470:	f7ff ff80 	bl	8000374 <DelayMs>
	uint8_t config = (LIS_DATARATE_25 | LIS_XYZ_ENABLE);
 8000474:	2347      	movs	r3, #71	@ 0x47
 8000476:	71fb      	strb	r3, [r7, #7]
	LIS_WriteIO(LIS_CTRL_REG4_ADDR, &config, 1);
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	2020      	movs	r0, #32
 8000480:	f7ff ffa0 	bl	80003c4 <LIS_WriteIO>
	DelayMs(3);
 8000484:	2003      	movs	r0, #3
 8000486:	f7ff ff75 	bl	8000374 <DelayMs>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <LIS_GetData>:

LIS_Data LIS_GetData(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b086      	sub	sp, #24
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	uint16_t x, y, z;
	LIS_ReadIO(LIS_OUT_X_L_ADDR, data, 2);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2202      	movs	r2, #2
 80004a0:	4619      	mov	r1, r3
 80004a2:	2028      	movs	r0, #40	@ 0x28
 80004a4:	f7ff ffb3 	bl	800040e <LIS_ReadIO>
	x = ((uint16_t)data[1] << 8) | data[0];
 80004a8:	7c7b      	ldrb	r3, [r7, #17]
 80004aa:	021b      	lsls	r3, r3, #8
 80004ac:	b21a      	sxth	r2, r3
 80004ae:	7c3b      	ldrb	r3, [r7, #16]
 80004b0:	b21b      	sxth	r3, r3
 80004b2:	4313      	orrs	r3, r2
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	82fb      	strh	r3, [r7, #22]
	LIS_ReadIO(LIS_OUT_Y_L_ADDR, data, 2);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2202      	movs	r2, #2
 80004be:	4619      	mov	r1, r3
 80004c0:	202a      	movs	r0, #42	@ 0x2a
 80004c2:	f7ff ffa4 	bl	800040e <LIS_ReadIO>
	y = ((uint16_t)data[1] << 8) | data[0];
 80004c6:	7c7b      	ldrb	r3, [r7, #17]
 80004c8:	021b      	lsls	r3, r3, #8
 80004ca:	b21a      	sxth	r2, r3
 80004cc:	7c3b      	ldrb	r3, [r7, #16]
 80004ce:	b21b      	sxth	r3, r3
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	82bb      	strh	r3, [r7, #20]
	LIS_ReadIO(LIS_OUT_Z_L_ADDR, data, 2);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2202      	movs	r2, #2
 80004dc:	4619      	mov	r1, r3
 80004de:	202c      	movs	r0, #44	@ 0x2c
 80004e0:	f7ff ff95 	bl	800040e <LIS_ReadIO>
	z = ((uint16_t)data[1] << 8) | data[0];
 80004e4:	7c7b      	ldrb	r3, [r7, #17]
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	b21a      	sxth	r2, r3
 80004ea:	7c3b      	ldrb	r3, [r7, #16]
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	827b      	strh	r3, [r7, #18]
	LIS_Data val;
	val.x = x;
 80004f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004f8:	813b      	strh	r3, [r7, #8]
	val.y = y;
 80004fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80004fe:	817b      	strh	r3, [r7, #10]
	val.z = z;
 8000500:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000504:	81bb      	strh	r3, [r7, #12]
	return val;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	461a      	mov	r2, r3
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	6010      	str	r0, [r2, #0]
 8000512:	889b      	ldrh	r3, [r3, #4]
 8000514:	8093      	strh	r3, [r2, #4]
}
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <LIS_DRdy>:

int LIS_DRdy(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
	uint8_t status;
	do
	{
		LIS_ReadIO(LIS_STATUS_ADDR, &status, 1);
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	2027      	movs	r0, #39	@ 0x27
 800052c:	f7ff ff6f 	bl	800040e <LIS_ReadIO>
	}
	while( (status & LIS_STATUS_XYZ_Msk) == 0 );
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f4      	beq.n	8000524 <LIS_DRdy+0x6>
	return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <LIS_DRdy_Calib>:

extern int xCal,yCal, zCal;

void LIS_DRdy_Calib(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
	int ret2 = LIS_DRdy();
 800054a:	f7ff ffe8 	bl	800051e <LIS_DRdy>
 800054e:	6138      	str	r0, [r7, #16]
	int sample = 100;
 8000550:	2364      	movs	r3, #100	@ 0x64
 8000552:	60fb      	str	r3, [r7, #12]
	if(ret2) {
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d043      	beq.n	80005e2 <LIS_DRdy_Calib+0x9e>
		for(int i = 0; i <= sample; i++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e01e      	b.n	800059e <LIS_DRdy_Calib+0x5a>
		{
			LIS_Data val = LIS_GetData();
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff95 	bl	8000492 <LIS_GetData>
			xCal = xCal + val.x;
 8000568:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800056c:	461a      	mov	r2, r3
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <LIS_DRdy_Calib+0xa8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a1d      	ldr	r2, [pc, #116]	@ (80005ec <LIS_DRdy_Calib+0xa8>)
 8000576:	6013      	str	r3, [r2, #0]
			yCal = yCal + val.y;
 8000578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057c:	461a      	mov	r2, r3
 800057e:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <LIS_DRdy_Calib+0xac>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4413      	add	r3, r2
 8000584:	4a1a      	ldr	r2, [pc, #104]	@ (80005f0 <LIS_DRdy_Calib+0xac>)
 8000586:	6013      	str	r3, [r2, #0]
			zCal = zCal + val.z;
 8000588:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800058c:	461a      	mov	r2, r3
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <LIS_DRdy_Calib+0xb0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <LIS_DRdy_Calib+0xb0>)
 8000596:	6013      	str	r3, [r2, #0]
		for(int i = 0; i <= sample; i++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	dddc      	ble.n	8000560 <LIS_DRdy_Calib+0x1c>
		}
		xCal = xCal/100;
 80005a6:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <LIS_DRdy_Calib+0xa8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <LIS_DRdy_Calib+0xb4>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1152      	asrs	r2, r2, #5
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LIS_DRdy_Calib+0xa8>)
 80005b8:	6013      	str	r3, [r2, #0]
		yCal = yCal/100;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <LIS_DRdy_Calib+0xac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <LIS_DRdy_Calib+0xb4>)
 80005c0:	fb82 1203 	smull	r1, r2, r2, r3
 80005c4:	1152      	asrs	r2, r2, #5
 80005c6:	17db      	asrs	r3, r3, #31
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <LIS_DRdy_Calib+0xac>)
 80005cc:	6013      	str	r3, [r2, #0]
		zCal = zCal/100;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <LIS_DRdy_Calib+0xb0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <LIS_DRdy_Calib+0xb4>)
 80005d4:	fb82 1203 	smull	r1, r2, r2, r3
 80005d8:	1152      	asrs	r2, r2, #5
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	4a05      	ldr	r2, [pc, #20]	@ (80005f4 <LIS_DRdy_Calib+0xb0>)
 80005e0:	6013      	str	r3, [r2, #0]
	}
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000074 	.word	0x20000074
 80005f0:	20000078 	.word	0x20000078
 80005f4:	2000007c 	.word	0x2000007c
 80005f8:	51eb851f 	.word	0x51eb851f

080005fc <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <DelayMs+0x44>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <DelayMs+0x48>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <DelayMs+0x4c>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	099b      	lsrs	r3, r3, #6
 8000616:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000622:	bf00      	nop
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <DelayMs+0x44>)
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	1ad2      	subs	r2, r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d3f8      	bcc.n	8000624 <DelayMs+0x28>
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e0001000 	.word	0xe0001000
 8000644:	20000000 	.word	0x20000000
 8000648:	10624dd3 	.word	0x10624dd3

0800064c <main>:
#endif

int xCal = 0, yCal = 0, zCal = 0;

int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b092      	sub	sp, #72	@ 0x48
 8000650:	af02      	add	r7, sp, #8
	char str[32];
	int ret;
	LIS_Data val;
	SystemInit();
 8000652:	f000 f9a1 	bl	8000998 <SystemInit>
	LedInit(LED_GREEN);
 8000656:	200c      	movs	r0, #12
 8000658:	f7ff fe0a 	bl	8000270 <LedInit>
	LedInit(LED_ORANGE);
 800065c:	200d      	movs	r0, #13
 800065e:	f7ff fe07 	bl	8000270 <LedInit>
	LedInit(LED_RED);
 8000662:	200e      	movs	r0, #14
 8000664:	f7ff fe04 	bl	8000270 <LedInit>
	LedInit(LED_BLUE);
 8000668:	200f      	movs	r0, #15
 800066a:	f7ff fe01 	bl	8000270 <LedInit>
	UartInit(BAUD_9600);
 800066e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000672:	f000 f9e3 	bl	8000a3c <UartInit>
	UartPuts("LIS3DSH Accel Demo!\r\n");
 8000676:	4840      	ldr	r0, [pc, #256]	@ (8000778 <main+0x12c>)
 8000678:	f000 fa50 	bl	8000b1c <UartPuts>
	LIS_Init();
 800067c:	f7ff fef2 	bl	8000464 <LIS_Init>
	DelayMs(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000684:	f7ff ffba 	bl	80005fc <DelayMs>

	LIS_DRdy_Calib();
 8000688:	f7ff ff5c 	bl	8000544 <LIS_DRdy_Calib>

	UartPuts("Calibration Done.\r\n");
 800068c:	483b      	ldr	r0, [pc, #236]	@ (800077c <main+0x130>)
 800068e:	f000 fa45 	bl	8000b1c <UartPuts>
	sprintf(str, "X=%d, Y=%d, Z=%d\r\n", xCal, yCal, zCal);
 8000692:	4b3b      	ldr	r3, [pc, #236]	@ (8000780 <main+0x134>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <main+0x138>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <main+0x13c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f107 000c 	add.w	r0, r7, #12
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	460b      	mov	r3, r1
 80006a6:	4939      	ldr	r1, [pc, #228]	@ (800078c <main+0x140>)
 80006a8:	f000 faca 	bl	8000c40 <siprintf>
	UartPuts(str);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fa33 	bl	8000b1c <UartPuts>

	DelayMs(3000);
 80006b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006ba:	f7ff ff9f 	bl	80005fc <DelayMs>

	while(1) {
		ret = LIS_DRdy();
 80006be:	f7ff ff2e 	bl	800051e <LIS_DRdy>
 80006c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if(ret) {
 80006c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <main+0x72>
			int xPLimit = 250, xMLimit = 50, yPLimit = 150, yMLimit = 0; //zPLimit = 250, zMLimit = 100
 80006ca:	23fa      	movs	r3, #250	@ 0xfa
 80006cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80006d2:	2396      	movs	r3, #150	@ 0x96
 80006d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			val = LIS_GetData();
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fed8 	bl	8000492 <LIS_GetData>
			sprintf(str, "X=%d, Y=%d, Z=%d\r\n", val.x, val.y, val.z);
 80006e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006e6:	461a      	mov	r2, r3
 80006e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006f2:	f107 000c 	add.w	r0, r7, #12
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	460b      	mov	r3, r1
 80006fa:	4924      	ldr	r1, [pc, #144]	@ (800078c <main+0x140>)
 80006fc:	f000 faa0 	bl	8000c40 <siprintf>
			UartPuts(str);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fa09 	bl	8000b1c <UartPuts>
			DelayMs(100);
 800070a:	2064      	movs	r0, #100	@ 0x64
 800070c:	f7ff ff76 	bl	80005fc <DelayMs>

			if(val.x > xPLimit)
 8000710:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000714:	461a      	mov	r2, r3
 8000716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000718:	4293      	cmp	r3, r2
 800071a:	da06      	bge.n	800072a <main+0xde>
			{
				LedOn(LED_RED);
 800071c:	200e      	movs	r0, #14
 800071e:	f7ff fe07 	bl	8000330 <LedOn>
				LedOff(LED_GREEN);
 8000722:	200c      	movs	r0, #12
 8000724:	f7ff fe14 	bl	8000350 <LedOff>
 8000728:	e00b      	b.n	8000742 <main+0xf6>
			}
			else if(val.x < xMLimit)
 800072a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000732:	4293      	cmp	r3, r2
 8000734:	dd05      	ble.n	8000742 <main+0xf6>
			{
				LedOff(LED_RED);
 8000736:	200e      	movs	r0, #14
 8000738:	f7ff fe0a 	bl	8000350 <LedOff>
				LedOn(LED_GREEN);
 800073c:	200c      	movs	r0, #12
 800073e:	f7ff fdf7 	bl	8000330 <LedOn>
			}
			if(val.y > yPLimit)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	461a      	mov	r2, r3
 8000748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800074a:	4293      	cmp	r3, r2
 800074c:	da06      	bge.n	800075c <main+0x110>
			{
				LedOn(LED_ORANGE);
 800074e:	200d      	movs	r0, #13
 8000750:	f7ff fdee 	bl	8000330 <LedOn>
				LedOff(LED_BLUE);
 8000754:	200f      	movs	r0, #15
 8000756:	f7ff fdfb 	bl	8000350 <LedOff>
 800075a:	e7b0      	b.n	80006be <main+0x72>
			}
			else if(val.y < yMLimit)
 800075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000760:	461a      	mov	r2, r3
 8000762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000764:	4293      	cmp	r3, r2
 8000766:	ddaa      	ble.n	80006be <main+0x72>
			{
				LedOff(LED_ORANGE);
 8000768:	200d      	movs	r0, #13
 800076a:	f7ff fdf1 	bl	8000350 <LedOff>
				LedOn(LED_BLUE);
 800076e:	200f      	movs	r0, #15
 8000770:	f7ff fdde 	bl	8000330 <LedOn>
		ret = LIS_DRdy();
 8000774:	e7a3      	b.n	80006be <main+0x72>
 8000776:	bf00      	nop
 8000778:	08001588 	.word	0x08001588
 800077c:	080015a0 	.word	0x080015a0
 8000780:	20000074 	.word	0x20000074
 8000784:	20000078 	.word	0x20000078
 8000788:	2000007c 	.word	0x2000007c
 800078c:	080015b4 	.word	0x080015b4

08000790 <SPI_Init>:
 */

#include "spi.h"

void SPI_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000794:	4b3c      	ldr	r3, [pc, #240]	@ (8000888 <SPI_Init+0xf8>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a3b      	ldr	r2, [pc, #236]	@ (8000888 <SPI_Init+0xf8>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOE->MODER &= ~BV(SPI_CS_PIN*2+1);
 80007a0:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <SPI_Init+0xfc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a39      	ldr	r2, [pc, #228]	@ (800088c <SPI_Init+0xfc>)
 80007a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007aa:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= BV(SPI_CS_PIN*2);
 80007ac:	4b37      	ldr	r3, [pc, #220]	@ (800088c <SPI_Init+0xfc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a36      	ldr	r2, [pc, #216]	@ (800088c <SPI_Init+0xfc>)
 80007b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b6:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR &= ~BV(SPI_CS_PIN*2+1);
 80007b8:	4b34      	ldr	r3, [pc, #208]	@ (800088c <SPI_Init+0xfc>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	4a33      	ldr	r2, [pc, #204]	@ (800088c <SPI_Init+0xfc>)
 80007be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007c2:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= BV(SPI_CS_PIN*2);
 80007c4:	4b31      	ldr	r3, [pc, #196]	@ (800088c <SPI_Init+0xfc>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4a30      	ldr	r2, [pc, #192]	@ (800088c <SPI_Init+0xfc>)
 80007ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ce:	6093      	str	r3, [r2, #8]
	GPIOE->PUPDR &= ~(BV(SPI_CS_PIN*2+1) | BV(SPI_CS_PIN*2));
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <SPI_Init+0xfc>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a2d      	ldr	r2, [pc, #180]	@ (800088c <SPI_Init+0xfc>)
 80007d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80007da:	60d3      	str	r3, [r2, #12]
	GPIOE->OTYPER &= ~BV(SPI_CS_PIN);
 80007dc:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <SPI_Init+0xfc>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4a2a      	ldr	r2, [pc, #168]	@ (800088c <SPI_Init+0xfc>)
 80007e2:	f023 0308 	bic.w	r3, r3, #8
 80007e6:	6053      	str	r3, [r2, #4]

	SPI_CS_Disable();
 80007e8:	f000 f894 	bl	8000914 <SPI_CS_Disable>

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <SPI_Init+0xf8>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f0:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <SPI_Init+0xf8>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <SPI_Init+0x100>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <SPI_Init+0x100>)
 80007fe:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000802:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <SPI_Init+0x100>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <SPI_Init+0x100>)
 800080a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800080e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <SPI_Init+0x100>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <SPI_Init+0x100>)
 8000816:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 800081a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <SPI_Init+0x100>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <SPI_Init+0x100>)
 8000822:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000826:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(SPI_MOSI_PIN*2)|BV(SPI_MISO_PIN*2)|BV(SPI_SCLK_PIN*2));
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <SPI_Init+0x100>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	4a18      	ldr	r2, [pc, #96]	@ (8000890 <SPI_Init+0x100>)
 800082e:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000832:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (BV(SPI_MOSI_PIN*2+1)|BV(SPI_MISO_PIN*2+1)|BV(SPI_SCLK_PIN*2+1));
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <SPI_Init+0x100>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <SPI_Init+0x100>)
 800083a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 800083e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(SPI_MOSI_PIN)|BV(SPI_MISO_PIN)|BV(SPI_SCLK_PIN));
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <SPI_Init+0x100>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <SPI_Init+0x100>)
 8000846:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800084a:	6053      	str	r3, [r2, #4]
	GPIOA->AFR[0] |= (SPI_ALT_FN << GPIO_AFRL_AFSEL5_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL6_Pos) | (SPI_ALT_FN << GPIO_AFRL_AFSEL7_Pos);
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <SPI_Init+0x100>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <SPI_Init+0x100>)
 8000852:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000856:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800085a:	6213      	str	r3, [r2, #32]

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <SPI_Init+0xf8>)
 800085e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000860:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <SPI_Init+0xf8>)
 8000862:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000866:	6453      	str	r3, [r2, #68]	@ 0x44

	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (0x02 << SPI_CR1_BR_Pos);
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <SPI_Init+0x104>)
 800086a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800086e:	601a      	str	r2, [r3, #0]

	SPI1->CR2 = 0x0000;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <SPI_Init+0x104>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]

	SPI1->CR1 |= SPI_CR1_SPE;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <SPI_Init+0x104>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <SPI_Init+0x104>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6013      	str	r3, [r2, #0]
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40021000 	.word	0x40021000
 8000890:	40020000 	.word	0x40020000
 8000894:	40013000 	.word	0x40013000

08000898 <SPI_Transmit>:

uint16_t SPI_Transmit(uint8_t dataW)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]

	while(!(SPI1->SR & SPI_SR_TXE));
 80008a2:	bf00      	nop
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <SPI_Transmit+0x44>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f9      	beq.n	80008a4 <SPI_Transmit+0xc>
	uint32_t frame = dataW;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	60fb      	str	r3, [r7, #12]
	SPI1->DR = frame;
 80008b4:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <SPI_Transmit+0x44>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));
 80008ba:	bf00      	nop
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <SPI_Transmit+0x44>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <SPI_Transmit+0x24>
	frame = SPI1->DR;
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <SPI_Transmit+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60fb      	str	r3, [r7, #12]
	return frame;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	b29b      	uxth	r3, r3
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40013000 	.word	0x40013000

080008e0 <SPI_Receive>:

uint16_t SPI_Receive(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	uint32_t val = SPI_Transmit(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ffd6 	bl	8000898 <SPI_Transmit>
 80008ec:	4603      	mov	r3, r0
 80008ee:	607b      	str	r3, [r7, #4]
	return val;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	b29b      	uxth	r3, r3
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SPI_CS_Enable>:

void SPI_CS_Enable(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	GPIOE->BSRR = BV(SPI_CS_CLR_BIT);
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <SPI_CS_Enable+0x14>)
 8000902:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000906:	619a      	str	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <SPI_CS_Disable>:

void SPI_CS_Disable(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	GPIOE->BSRR = BV(SPI_CS_SET_BIT);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <SPI_CS_Disable+0x14>)
 800091a:	2208      	movs	r2, #8
 800091c:	619a      	str	r2, [r3, #24]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f000 f990 	bl	8000c80 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20020000 	.word	0x20020000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000080 	.word	0x20000080
 8000994:	200001d8 	.word	0x200001d8

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  DWT_Init();
 800099c:	f000 f802 	bl	80009a4 <DWT_Init>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <DWT_Init+0x58>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	4a13      	ldr	r2, [pc, #76]	@ (80009fc <DWT_Init+0x58>)
 80009ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80009b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <DWT_Init+0x58>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <DWT_Init+0x58>)
 80009ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009be:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <DWT_Init+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a00 <DWT_Init+0x5c>)
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <DWT_Init+0x5c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <DWT_Init+0x5c>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <DWT_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80009de:	bf00      	nop
    __ASM volatile ("NOP");
 80009e0:	bf00      	nop
    __ASM volatile ("NOP");
 80009e2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <DWT_Init+0x5c>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000edf0 	.word	0xe000edf0
 8000a00:	e0001000 	.word	0xe0001000

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4906      	ldr	r1, [pc, #24]	@ (8000a38 <__NVIC_EnableIRQ+0x34>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <UartInit>:
#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <UartInit+0xd4>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <UartInit+0xd4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000a50:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <UartInit+0xd8>)
 8000a52:	6a1b      	ldr	r3, [r3, #32]
 8000a54:	4a2f      	ldr	r2, [pc, #188]	@ (8000b14 <UartInit+0xd8>)
 8000a56:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000a5a:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <UartInit+0xd8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a2c      	ldr	r2, [pc, #176]	@ (8000b14 <UartInit+0xd8>)
 8000a62:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000a66:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000a68:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <UartInit+0xd8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a29      	ldr	r2, [pc, #164]	@ (8000b14 <UartInit+0xd8>)
 8000a6e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000a72:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <UartInit+0xd8>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a26      	ldr	r2, [pc, #152]	@ (8000b14 <UartInit+0xd8>)
 8000a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a7e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <UartInit+0xd8>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	4a23      	ldr	r2, [pc, #140]	@ (8000b14 <UartInit+0xd8>)
 8000a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a8a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <UartInit+0xd8>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <UartInit+0xd8>)
 8000a92:	f023 030c 	bic.w	r3, r3, #12
 8000a96:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <UartInit+0xd4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <UartInit+0xd4>)
 8000a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <UartInit+0xdc>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <UartInit+0xdc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <UartInit+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	switch(baud)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000abc:	d016      	beq.n	8000aec <UartInit+0xb0>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000ac4:	d816      	bhi.n	8000af4 <UartInit+0xb8>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000acc:	d004      	beq.n	8000ad8 <UartInit+0x9c>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000ad4:	d005      	beq.n	8000ae2 <UartInit+0xa6>
 8000ad6:	e00d      	b.n	8000af4 <UartInit+0xb8>
	{
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <UartInit+0xdc>)
 8000ada:	f240 6283 	movw	r2, #1667	@ 0x683
 8000ade:	609a      	str	r2, [r3, #8]
			break;
 8000ae0:	e008      	b.n	8000af4 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <UartInit+0xdc>)
 8000ae4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000ae8:	609a      	str	r2, [r3, #8]
			break;
 8000aea:	e003      	b.n	8000af4 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <UartInit+0xdc>)
 8000aee:	228b      	movs	r2, #139	@ 0x8b
 8000af0:	609a      	str	r2, [r3, #8]
			break;
 8000af2:	bf00      	nop
	}
	NVIC_EnableIRQ(USART2_IRQn);
 8000af4:	2026      	movs	r0, #38	@ 0x26
 8000af6:	f7ff ff85 	bl	8000a04 <__NVIC_EnableIRQ>
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <UartInit+0xdc>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <UartInit+0xdc>)
 8000b00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b04:	60d3      	str	r3, [r2, #12]
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40004400 	.word	0x40004400

08000b1c <UartPuts>:

char *tx_string;
int tx_index = 0;
volatile int tx_complete = 1;
void UartPuts(char str[])
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	while(!tx_complete);
 8000b24:	bf00      	nop
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <UartPuts+0x54>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0fb      	beq.n	8000b26 <UartPuts+0xa>
	tx_complete = 0;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <UartPuts+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
	tx_string = str;
 8000b34:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <UartPuts+0x58>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
	tx_index = 0;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <UartPuts+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	USART2->DR = tx_string[tx_index];
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <UartPuts+0x58>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <UartPuts+0x5c>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <UartPuts+0x60>)
 8000b4e:	605a      	str	r2, [r3, #4]
	tx_index++;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <UartPuts+0x5c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <UartPuts+0x5c>)
 8000b58:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= BV(USART_CR1_TXEIE_Pos);
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <UartPuts+0x60>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <UartPuts+0x60>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b64:	60d3      	str	r3, [r2, #12]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000004 	.word	0x20000004
 8000b74:	20000084 	.word	0x20000084
 8000b78:	20000088 	.word	0x20000088
 8000b7c:	40004400 	.word	0x40004400

08000b80 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	if((USART2->SR & BV(USART_SR_TXE_Pos)) != 0)
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <USART2_IRQHandler+0x5c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d021      	beq.n	8000bd4 <USART2_IRQHandler+0x54>
	{
		if(tx_string[tx_index] != '\0')
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <USART2_IRQHandler+0x60>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <USART2_IRQHandler+0x64>)
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00d      	beq.n	8000bbc <USART2_IRQHandler+0x3c>
		{
			USART2->DR = tx_string[tx_index];
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <USART2_IRQHandler+0x60>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <USART2_IRQHandler+0x64>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <USART2_IRQHandler+0x5c>)
 8000bae:	605a      	str	r2, [r3, #4]
			tx_index++;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <USART2_IRQHandler+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <USART2_IRQHandler+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]
			tx_string = NULL;
			tx_complete = 1;
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
		}
	}
}
 8000bba:	e00b      	b.n	8000bd4 <USART2_IRQHandler+0x54>
			tx_string = NULL;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <USART2_IRQHandler+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
			tx_complete = 1;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <USART2_IRQHandler+0x68>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
			USART2->CR1 &= ~BV(USART_CR1_TXEIE_Pos);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <USART2_IRQHandler+0x5c>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <USART2_IRQHandler+0x5c>)
 8000bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	20000084 	.word	0x20000084
 8000be4:	20000088 	.word	0x20000088
 8000be8:	20000004 	.word	0x20000004

08000bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf0:	f7ff fed2 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f000 f837 	bl	8000c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fd15 	bl	800064c <main>

08000c22 <LoopForever>:

LoopForever:
  b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000c30:	0800160c 	.word	0x0800160c
  ldr r2, =_sbss
 8000c34:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000c38:	200001d4 	.word	0x200001d4

08000c3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <siprintf>:
 8000c40:	b40e      	push	{r1, r2, r3}
 8000c42:	b500      	push	{lr}
 8000c44:	b09c      	sub	sp, #112	@ 0x70
 8000c46:	ab1d      	add	r3, sp, #116	@ 0x74
 8000c48:	9002      	str	r0, [sp, #8]
 8000c4a:	9006      	str	r0, [sp, #24]
 8000c4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000c50:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <siprintf+0x38>)
 8000c52:	9107      	str	r1, [sp, #28]
 8000c54:	9104      	str	r1, [sp, #16]
 8000c56:	4909      	ldr	r1, [pc, #36]	@ (8000c7c <siprintf+0x3c>)
 8000c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c5c:	9105      	str	r1, [sp, #20]
 8000c5e:	6800      	ldr	r0, [r0, #0]
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	a902      	add	r1, sp, #8
 8000c64:	f000 f98c 	bl	8000f80 <_svfiprintf_r>
 8000c68:	9b02      	ldr	r3, [sp, #8]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	b01c      	add	sp, #112	@ 0x70
 8000c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c74:	b003      	add	sp, #12
 8000c76:	4770      	bx	lr
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	ffff0208 	.word	0xffff0208

08000c80 <__errno>:
 8000c80:	4b01      	ldr	r3, [pc, #4]	@ (8000c88 <__errno+0x8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <__libc_init_array>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cc4 <__libc_init_array+0x38>)
 8000c90:	4c0d      	ldr	r4, [pc, #52]	@ (8000cc8 <__libc_init_array+0x3c>)
 8000c92:	1b64      	subs	r4, r4, r5
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	2600      	movs	r6, #0
 8000c98:	42a6      	cmp	r6, r4
 8000c9a:	d109      	bne.n	8000cb0 <__libc_init_array+0x24>
 8000c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000ccc <__libc_init_array+0x40>)
 8000c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd0 <__libc_init_array+0x44>)
 8000ca0:	f000 fc66 	bl	8001570 <_init>
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	2600      	movs	r6, #0
 8000caa:	42a6      	cmp	r6, r4
 8000cac:	d105      	bne.n	8000cba <__libc_init_array+0x2e>
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb4:	4798      	blx	r3
 8000cb6:	3601      	adds	r6, #1
 8000cb8:	e7ee      	b.n	8000c98 <__libc_init_array+0xc>
 8000cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cbe:	4798      	blx	r3
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7f2      	b.n	8000caa <__libc_init_array+0x1e>
 8000cc4:	08001604 	.word	0x08001604
 8000cc8:	08001604 	.word	0x08001604
 8000ccc:	08001604 	.word	0x08001604
 8000cd0:	08001608 	.word	0x08001608

08000cd4 <__retarget_lock_acquire_recursive>:
 8000cd4:	4770      	bx	lr

08000cd6 <__retarget_lock_release_recursive>:
 8000cd6:	4770      	bx	lr

08000cd8 <_free_r>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	4605      	mov	r5, r0
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	d041      	beq.n	8000d64 <_free_r+0x8c>
 8000ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce4:	1f0c      	subs	r4, r1, #4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bfb8      	it	lt
 8000cea:	18e4      	addlt	r4, r4, r3
 8000cec:	f000 f8e0 	bl	8000eb0 <__malloc_lock>
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d68 <_free_r+0x90>)
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	b933      	cbnz	r3, 8000d04 <_free_r+0x2c>
 8000cf6:	6063      	str	r3, [r4, #4]
 8000cf8:	6014      	str	r4, [r2, #0]
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b8dc 	b.w	8000ebc <__malloc_unlock>
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	d908      	bls.n	8000d1a <_free_r+0x42>
 8000d08:	6820      	ldr	r0, [r4, #0]
 8000d0a:	1821      	adds	r1, r4, r0
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	bf01      	itttt	eq
 8000d10:	6819      	ldreq	r1, [r3, #0]
 8000d12:	685b      	ldreq	r3, [r3, #4]
 8000d14:	1809      	addeq	r1, r1, r0
 8000d16:	6021      	streq	r1, [r4, #0]
 8000d18:	e7ed      	b.n	8000cf6 <_free_r+0x1e>
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	b10b      	cbz	r3, 8000d24 <_free_r+0x4c>
 8000d20:	42a3      	cmp	r3, r4
 8000d22:	d9fa      	bls.n	8000d1a <_free_r+0x42>
 8000d24:	6811      	ldr	r1, [r2, #0]
 8000d26:	1850      	adds	r0, r2, r1
 8000d28:	42a0      	cmp	r0, r4
 8000d2a:	d10b      	bne.n	8000d44 <_free_r+0x6c>
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	4401      	add	r1, r0
 8000d30:	1850      	adds	r0, r2, r1
 8000d32:	4283      	cmp	r3, r0
 8000d34:	6011      	str	r1, [r2, #0]
 8000d36:	d1e0      	bne.n	8000cfa <_free_r+0x22>
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	6053      	str	r3, [r2, #4]
 8000d3e:	4408      	add	r0, r1
 8000d40:	6010      	str	r0, [r2, #0]
 8000d42:	e7da      	b.n	8000cfa <_free_r+0x22>
 8000d44:	d902      	bls.n	8000d4c <_free_r+0x74>
 8000d46:	230c      	movs	r3, #12
 8000d48:	602b      	str	r3, [r5, #0]
 8000d4a:	e7d6      	b.n	8000cfa <_free_r+0x22>
 8000d4c:	6820      	ldr	r0, [r4, #0]
 8000d4e:	1821      	adds	r1, r4, r0
 8000d50:	428b      	cmp	r3, r1
 8000d52:	bf04      	itt	eq
 8000d54:	6819      	ldreq	r1, [r3, #0]
 8000d56:	685b      	ldreq	r3, [r3, #4]
 8000d58:	6063      	str	r3, [r4, #4]
 8000d5a:	bf04      	itt	eq
 8000d5c:	1809      	addeq	r1, r1, r0
 8000d5e:	6021      	streq	r1, [r4, #0]
 8000d60:	6054      	str	r4, [r2, #4]
 8000d62:	e7ca      	b.n	8000cfa <_free_r+0x22>
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop
 8000d68:	200001d0 	.word	0x200001d0

08000d6c <sbrk_aligned>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000dac <sbrk_aligned+0x40>)
 8000d70:	460c      	mov	r4, r1
 8000d72:	6831      	ldr	r1, [r6, #0]
 8000d74:	4605      	mov	r5, r0
 8000d76:	b911      	cbnz	r1, 8000d7e <sbrk_aligned+0x12>
 8000d78:	f000 fba6 	bl	80014c8 <_sbrk_r>
 8000d7c:	6030      	str	r0, [r6, #0]
 8000d7e:	4621      	mov	r1, r4
 8000d80:	4628      	mov	r0, r5
 8000d82:	f000 fba1 	bl	80014c8 <_sbrk_r>
 8000d86:	1c43      	adds	r3, r0, #1
 8000d88:	d103      	bne.n	8000d92 <sbrk_aligned+0x26>
 8000d8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d8e:	4620      	mov	r0, r4
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
 8000d92:	1cc4      	adds	r4, r0, #3
 8000d94:	f024 0403 	bic.w	r4, r4, #3
 8000d98:	42a0      	cmp	r0, r4
 8000d9a:	d0f8      	beq.n	8000d8e <sbrk_aligned+0x22>
 8000d9c:	1a21      	subs	r1, r4, r0
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f000 fb92 	bl	80014c8 <_sbrk_r>
 8000da4:	3001      	adds	r0, #1
 8000da6:	d1f2      	bne.n	8000d8e <sbrk_aligned+0x22>
 8000da8:	e7ef      	b.n	8000d8a <sbrk_aligned+0x1e>
 8000daa:	bf00      	nop
 8000dac:	200001cc 	.word	0x200001cc

08000db0 <_malloc_r>:
 8000db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000db4:	1ccd      	adds	r5, r1, #3
 8000db6:	f025 0503 	bic.w	r5, r5, #3
 8000dba:	3508      	adds	r5, #8
 8000dbc:	2d0c      	cmp	r5, #12
 8000dbe:	bf38      	it	cc
 8000dc0:	250c      	movcc	r5, #12
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	db01      	blt.n	8000dcc <_malloc_r+0x1c>
 8000dc8:	42a9      	cmp	r1, r5
 8000dca:	d904      	bls.n	8000dd6 <_malloc_r+0x26>
 8000dcc:	230c      	movs	r3, #12
 8000dce:	6033      	str	r3, [r6, #0]
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000eac <_malloc_r+0xfc>
 8000dda:	f000 f869 	bl	8000eb0 <__malloc_lock>
 8000dde:	f8d8 3000 	ldr.w	r3, [r8]
 8000de2:	461c      	mov	r4, r3
 8000de4:	bb44      	cbnz	r4, 8000e38 <_malloc_r+0x88>
 8000de6:	4629      	mov	r1, r5
 8000de8:	4630      	mov	r0, r6
 8000dea:	f7ff ffbf 	bl	8000d6c <sbrk_aligned>
 8000dee:	1c43      	adds	r3, r0, #1
 8000df0:	4604      	mov	r4, r0
 8000df2:	d158      	bne.n	8000ea6 <_malloc_r+0xf6>
 8000df4:	f8d8 4000 	ldr.w	r4, [r8]
 8000df8:	4627      	mov	r7, r4
 8000dfa:	2f00      	cmp	r7, #0
 8000dfc:	d143      	bne.n	8000e86 <_malloc_r+0xd6>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d04b      	beq.n	8000e9a <_malloc_r+0xea>
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	4639      	mov	r1, r7
 8000e06:	4630      	mov	r0, r6
 8000e08:	eb04 0903 	add.w	r9, r4, r3
 8000e0c:	f000 fb5c 	bl	80014c8 <_sbrk_r>
 8000e10:	4581      	cmp	r9, r0
 8000e12:	d142      	bne.n	8000e9a <_malloc_r+0xea>
 8000e14:	6821      	ldr	r1, [r4, #0]
 8000e16:	1a6d      	subs	r5, r5, r1
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f7ff ffa6 	bl	8000d6c <sbrk_aligned>
 8000e20:	3001      	adds	r0, #1
 8000e22:	d03a      	beq.n	8000e9a <_malloc_r+0xea>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	442b      	add	r3, r5
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	bb62      	cbnz	r2, 8000e8c <_malloc_r+0xdc>
 8000e32:	f8c8 7000 	str.w	r7, [r8]
 8000e36:	e00f      	b.n	8000e58 <_malloc_r+0xa8>
 8000e38:	6822      	ldr	r2, [r4, #0]
 8000e3a:	1b52      	subs	r2, r2, r5
 8000e3c:	d420      	bmi.n	8000e80 <_malloc_r+0xd0>
 8000e3e:	2a0b      	cmp	r2, #11
 8000e40:	d917      	bls.n	8000e72 <_malloc_r+0xc2>
 8000e42:	1961      	adds	r1, r4, r5
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	6025      	str	r5, [r4, #0]
 8000e48:	bf18      	it	ne
 8000e4a:	6059      	strne	r1, [r3, #4]
 8000e4c:	6863      	ldr	r3, [r4, #4]
 8000e4e:	bf08      	it	eq
 8000e50:	f8c8 1000 	streq.w	r1, [r8]
 8000e54:	5162      	str	r2, [r4, r5]
 8000e56:	604b      	str	r3, [r1, #4]
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f000 f82f 	bl	8000ebc <__malloc_unlock>
 8000e5e:	f104 000b 	add.w	r0, r4, #11
 8000e62:	1d23      	adds	r3, r4, #4
 8000e64:	f020 0007 	bic.w	r0, r0, #7
 8000e68:	1ac2      	subs	r2, r0, r3
 8000e6a:	bf1c      	itt	ne
 8000e6c:	1a1b      	subne	r3, r3, r0
 8000e6e:	50a3      	strne	r3, [r4, r2]
 8000e70:	e7af      	b.n	8000dd2 <_malloc_r+0x22>
 8000e72:	6862      	ldr	r2, [r4, #4]
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	bf0c      	ite	eq
 8000e78:	f8c8 2000 	streq.w	r2, [r8]
 8000e7c:	605a      	strne	r2, [r3, #4]
 8000e7e:	e7eb      	b.n	8000e58 <_malloc_r+0xa8>
 8000e80:	4623      	mov	r3, r4
 8000e82:	6864      	ldr	r4, [r4, #4]
 8000e84:	e7ae      	b.n	8000de4 <_malloc_r+0x34>
 8000e86:	463c      	mov	r4, r7
 8000e88:	687f      	ldr	r7, [r7, #4]
 8000e8a:	e7b6      	b.n	8000dfa <_malloc_r+0x4a>
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	d1fb      	bne.n	8000e8c <_malloc_r+0xdc>
 8000e94:	2300      	movs	r3, #0
 8000e96:	6053      	str	r3, [r2, #4]
 8000e98:	e7de      	b.n	8000e58 <_malloc_r+0xa8>
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	6033      	str	r3, [r6, #0]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f000 f80c 	bl	8000ebc <__malloc_unlock>
 8000ea4:	e794      	b.n	8000dd0 <_malloc_r+0x20>
 8000ea6:	6005      	str	r5, [r0, #0]
 8000ea8:	e7d6      	b.n	8000e58 <_malloc_r+0xa8>
 8000eaa:	bf00      	nop
 8000eac:	200001d0 	.word	0x200001d0

08000eb0 <__malloc_lock>:
 8000eb0:	4801      	ldr	r0, [pc, #4]	@ (8000eb8 <__malloc_lock+0x8>)
 8000eb2:	f7ff bf0f 	b.w	8000cd4 <__retarget_lock_acquire_recursive>
 8000eb6:	bf00      	nop
 8000eb8:	200001c8 	.word	0x200001c8

08000ebc <__malloc_unlock>:
 8000ebc:	4801      	ldr	r0, [pc, #4]	@ (8000ec4 <__malloc_unlock+0x8>)
 8000ebe:	f7ff bf0a 	b.w	8000cd6 <__retarget_lock_release_recursive>
 8000ec2:	bf00      	nop
 8000ec4:	200001c8 	.word	0x200001c8

08000ec8 <__ssputs_r>:
 8000ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ecc:	688e      	ldr	r6, [r1, #8]
 8000ece:	461f      	mov	r7, r3
 8000ed0:	42be      	cmp	r6, r7
 8000ed2:	680b      	ldr	r3, [r1, #0]
 8000ed4:	4682      	mov	sl, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4690      	mov	r8, r2
 8000eda:	d82d      	bhi.n	8000f38 <__ssputs_r+0x70>
 8000edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ee0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ee4:	d026      	beq.n	8000f34 <__ssputs_r+0x6c>
 8000ee6:	6965      	ldr	r5, [r4, #20]
 8000ee8:	6909      	ldr	r1, [r1, #16]
 8000eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000eee:	eba3 0901 	sub.w	r9, r3, r1
 8000ef2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ef6:	1c7b      	adds	r3, r7, #1
 8000ef8:	444b      	add	r3, r9
 8000efa:	106d      	asrs	r5, r5, #1
 8000efc:	429d      	cmp	r5, r3
 8000efe:	bf38      	it	cc
 8000f00:	461d      	movcc	r5, r3
 8000f02:	0553      	lsls	r3, r2, #21
 8000f04:	d527      	bpl.n	8000f56 <__ssputs_r+0x8e>
 8000f06:	4629      	mov	r1, r5
 8000f08:	f7ff ff52 	bl	8000db0 <_malloc_r>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	b360      	cbz	r0, 8000f6a <__ssputs_r+0xa2>
 8000f10:	6921      	ldr	r1, [r4, #16]
 8000f12:	464a      	mov	r2, r9
 8000f14:	f000 fae8 	bl	80014e8 <memcpy>
 8000f18:	89a3      	ldrh	r3, [r4, #12]
 8000f1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f22:	81a3      	strh	r3, [r4, #12]
 8000f24:	6126      	str	r6, [r4, #16]
 8000f26:	6165      	str	r5, [r4, #20]
 8000f28:	444e      	add	r6, r9
 8000f2a:	eba5 0509 	sub.w	r5, r5, r9
 8000f2e:	6026      	str	r6, [r4, #0]
 8000f30:	60a5      	str	r5, [r4, #8]
 8000f32:	463e      	mov	r6, r7
 8000f34:	42be      	cmp	r6, r7
 8000f36:	d900      	bls.n	8000f3a <__ssputs_r+0x72>
 8000f38:	463e      	mov	r6, r7
 8000f3a:	6820      	ldr	r0, [r4, #0]
 8000f3c:	4632      	mov	r2, r6
 8000f3e:	4641      	mov	r1, r8
 8000f40:	f000 faa8 	bl	8001494 <memmove>
 8000f44:	68a3      	ldr	r3, [r4, #8]
 8000f46:	1b9b      	subs	r3, r3, r6
 8000f48:	60a3      	str	r3, [r4, #8]
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	4433      	add	r3, r6
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	2000      	movs	r0, #0
 8000f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f56:	462a      	mov	r2, r5
 8000f58:	f000 fad4 	bl	8001504 <_realloc_r>
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1e0      	bne.n	8000f24 <__ssputs_r+0x5c>
 8000f62:	6921      	ldr	r1, [r4, #16]
 8000f64:	4650      	mov	r0, sl
 8000f66:	f7ff feb7 	bl	8000cd8 <_free_r>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	f8ca 3000 	str.w	r3, [sl]
 8000f70:	89a3      	ldrh	r3, [r4, #12]
 8000f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7c:	e7e9      	b.n	8000f52 <__ssputs_r+0x8a>
	...

08000f80 <_svfiprintf_r>:
 8000f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f84:	4698      	mov	r8, r3
 8000f86:	898b      	ldrh	r3, [r1, #12]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	b09d      	sub	sp, #116	@ 0x74
 8000f8c:	4607      	mov	r7, r0
 8000f8e:	460d      	mov	r5, r1
 8000f90:	4614      	mov	r4, r2
 8000f92:	d510      	bpl.n	8000fb6 <_svfiprintf_r+0x36>
 8000f94:	690b      	ldr	r3, [r1, #16]
 8000f96:	b973      	cbnz	r3, 8000fb6 <_svfiprintf_r+0x36>
 8000f98:	2140      	movs	r1, #64	@ 0x40
 8000f9a:	f7ff ff09 	bl	8000db0 <_malloc_r>
 8000f9e:	6028      	str	r0, [r5, #0]
 8000fa0:	6128      	str	r0, [r5, #16]
 8000fa2:	b930      	cbnz	r0, 8000fb2 <_svfiprintf_r+0x32>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fac:	b01d      	add	sp, #116	@ 0x74
 8000fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb2:	2340      	movs	r3, #64	@ 0x40
 8000fb4:	616b      	str	r3, [r5, #20]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fba:	2320      	movs	r3, #32
 8000fbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fc4:	2330      	movs	r3, #48	@ 0x30
 8000fc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001164 <_svfiprintf_r+0x1e4>
 8000fca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fce:	f04f 0901 	mov.w	r9, #1
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	469a      	mov	sl, r3
 8000fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fda:	b10a      	cbz	r2, 8000fe0 <_svfiprintf_r+0x60>
 8000fdc:	2a25      	cmp	r2, #37	@ 0x25
 8000fde:	d1f9      	bne.n	8000fd4 <_svfiprintf_r+0x54>
 8000fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8000fe4:	d00b      	beq.n	8000ffe <_svfiprintf_r+0x7e>
 8000fe6:	465b      	mov	r3, fp
 8000fe8:	4622      	mov	r2, r4
 8000fea:	4629      	mov	r1, r5
 8000fec:	4638      	mov	r0, r7
 8000fee:	f7ff ff6b 	bl	8000ec8 <__ssputs_r>
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	f000 80a7 	beq.w	8001146 <_svfiprintf_r+0x1c6>
 8000ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ffa:	445a      	add	r2, fp
 8000ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 809f 	beq.w	8001146 <_svfiprintf_r+0x1c6>
 8001008:	2300      	movs	r3, #0
 800100a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800100e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001012:	f10a 0a01 	add.w	sl, sl, #1
 8001016:	9304      	str	r3, [sp, #16]
 8001018:	9307      	str	r3, [sp, #28]
 800101a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800101e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001020:	4654      	mov	r4, sl
 8001022:	2205      	movs	r2, #5
 8001024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001028:	484e      	ldr	r0, [pc, #312]	@ (8001164 <_svfiprintf_r+0x1e4>)
 800102a:	f7ff f8d1 	bl	80001d0 <memchr>
 800102e:	9a04      	ldr	r2, [sp, #16]
 8001030:	b9d8      	cbnz	r0, 800106a <_svfiprintf_r+0xea>
 8001032:	06d0      	lsls	r0, r2, #27
 8001034:	bf44      	itt	mi
 8001036:	2320      	movmi	r3, #32
 8001038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800103c:	0711      	lsls	r1, r2, #28
 800103e:	bf44      	itt	mi
 8001040:	232b      	movmi	r3, #43	@ 0x2b
 8001042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001046:	f89a 3000 	ldrb.w	r3, [sl]
 800104a:	2b2a      	cmp	r3, #42	@ 0x2a
 800104c:	d015      	beq.n	800107a <_svfiprintf_r+0xfa>
 800104e:	9a07      	ldr	r2, [sp, #28]
 8001050:	4654      	mov	r4, sl
 8001052:	2000      	movs	r0, #0
 8001054:	f04f 0c0a 	mov.w	ip, #10
 8001058:	4621      	mov	r1, r4
 800105a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800105e:	3b30      	subs	r3, #48	@ 0x30
 8001060:	2b09      	cmp	r3, #9
 8001062:	d94b      	bls.n	80010fc <_svfiprintf_r+0x17c>
 8001064:	b1b0      	cbz	r0, 8001094 <_svfiprintf_r+0x114>
 8001066:	9207      	str	r2, [sp, #28]
 8001068:	e014      	b.n	8001094 <_svfiprintf_r+0x114>
 800106a:	eba0 0308 	sub.w	r3, r0, r8
 800106e:	fa09 f303 	lsl.w	r3, r9, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	9304      	str	r3, [sp, #16]
 8001076:	46a2      	mov	sl, r4
 8001078:	e7d2      	b.n	8001020 <_svfiprintf_r+0xa0>
 800107a:	9b03      	ldr	r3, [sp, #12]
 800107c:	1d19      	adds	r1, r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	9103      	str	r1, [sp, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	bfbb      	ittet	lt
 8001086:	425b      	neglt	r3, r3
 8001088:	f042 0202 	orrlt.w	r2, r2, #2
 800108c:	9307      	strge	r3, [sp, #28]
 800108e:	9307      	strlt	r3, [sp, #28]
 8001090:	bfb8      	it	lt
 8001092:	9204      	strlt	r2, [sp, #16]
 8001094:	7823      	ldrb	r3, [r4, #0]
 8001096:	2b2e      	cmp	r3, #46	@ 0x2e
 8001098:	d10a      	bne.n	80010b0 <_svfiprintf_r+0x130>
 800109a:	7863      	ldrb	r3, [r4, #1]
 800109c:	2b2a      	cmp	r3, #42	@ 0x2a
 800109e:	d132      	bne.n	8001106 <_svfiprintf_r+0x186>
 80010a0:	9b03      	ldr	r3, [sp, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	9203      	str	r2, [sp, #12]
 80010a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010ac:	3402      	adds	r4, #2
 80010ae:	9305      	str	r3, [sp, #20]
 80010b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001168 <_svfiprintf_r+0x1e8>
 80010b4:	7821      	ldrb	r1, [r4, #0]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4650      	mov	r0, sl
 80010ba:	f7ff f889 	bl	80001d0 <memchr>
 80010be:	b138      	cbz	r0, 80010d0 <_svfiprintf_r+0x150>
 80010c0:	9b04      	ldr	r3, [sp, #16]
 80010c2:	eba0 000a 	sub.w	r0, r0, sl
 80010c6:	2240      	movs	r2, #64	@ 0x40
 80010c8:	4082      	lsls	r2, r0
 80010ca:	4313      	orrs	r3, r2
 80010cc:	3401      	adds	r4, #1
 80010ce:	9304      	str	r3, [sp, #16]
 80010d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d4:	4825      	ldr	r0, [pc, #148]	@ (800116c <_svfiprintf_r+0x1ec>)
 80010d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010da:	2206      	movs	r2, #6
 80010dc:	f7ff f878 	bl	80001d0 <memchr>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d036      	beq.n	8001152 <_svfiprintf_r+0x1d2>
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <_svfiprintf_r+0x1f0>)
 80010e6:	bb1b      	cbnz	r3, 8001130 <_svfiprintf_r+0x1b0>
 80010e8:	9b03      	ldr	r3, [sp, #12]
 80010ea:	3307      	adds	r3, #7
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	3308      	adds	r3, #8
 80010f2:	9303      	str	r3, [sp, #12]
 80010f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010f6:	4433      	add	r3, r6
 80010f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80010fa:	e76a      	b.n	8000fd2 <_svfiprintf_r+0x52>
 80010fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001100:	460c      	mov	r4, r1
 8001102:	2001      	movs	r0, #1
 8001104:	e7a8      	b.n	8001058 <_svfiprintf_r+0xd8>
 8001106:	2300      	movs	r3, #0
 8001108:	3401      	adds	r4, #1
 800110a:	9305      	str	r3, [sp, #20]
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 0c0a 	mov.w	ip, #10
 8001112:	4620      	mov	r0, r4
 8001114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001118:	3a30      	subs	r2, #48	@ 0x30
 800111a:	2a09      	cmp	r2, #9
 800111c:	d903      	bls.n	8001126 <_svfiprintf_r+0x1a6>
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0c6      	beq.n	80010b0 <_svfiprintf_r+0x130>
 8001122:	9105      	str	r1, [sp, #20]
 8001124:	e7c4      	b.n	80010b0 <_svfiprintf_r+0x130>
 8001126:	fb0c 2101 	mla	r1, ip, r1, r2
 800112a:	4604      	mov	r4, r0
 800112c:	2301      	movs	r3, #1
 800112e:	e7f0      	b.n	8001112 <_svfiprintf_r+0x192>
 8001130:	ab03      	add	r3, sp, #12
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	462a      	mov	r2, r5
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <_svfiprintf_r+0x1f4>)
 8001138:	a904      	add	r1, sp, #16
 800113a:	4638      	mov	r0, r7
 800113c:	f3af 8000 	nop.w
 8001140:	1c42      	adds	r2, r0, #1
 8001142:	4606      	mov	r6, r0
 8001144:	d1d6      	bne.n	80010f4 <_svfiprintf_r+0x174>
 8001146:	89ab      	ldrh	r3, [r5, #12]
 8001148:	065b      	lsls	r3, r3, #25
 800114a:	f53f af2d 	bmi.w	8000fa8 <_svfiprintf_r+0x28>
 800114e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001150:	e72c      	b.n	8000fac <_svfiprintf_r+0x2c>
 8001152:	ab03      	add	r3, sp, #12
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	462a      	mov	r2, r5
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <_svfiprintf_r+0x1f4>)
 800115a:	a904      	add	r1, sp, #16
 800115c:	4638      	mov	r0, r7
 800115e:	f000 f879 	bl	8001254 <_printf_i>
 8001162:	e7ed      	b.n	8001140 <_svfiprintf_r+0x1c0>
 8001164:	080015c7 	.word	0x080015c7
 8001168:	080015cd 	.word	0x080015cd
 800116c:	080015d1 	.word	0x080015d1
 8001170:	00000000 	.word	0x00000000
 8001174:	08000ec9 	.word	0x08000ec9

08001178 <_printf_common>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	4616      	mov	r6, r2
 800117e:	4698      	mov	r8, r3
 8001180:	688a      	ldr	r2, [r1, #8]
 8001182:	690b      	ldr	r3, [r1, #16]
 8001184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001188:	4293      	cmp	r3, r2
 800118a:	bfb8      	it	lt
 800118c:	4613      	movlt	r3, r2
 800118e:	6033      	str	r3, [r6, #0]
 8001190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001194:	4607      	mov	r7, r0
 8001196:	460c      	mov	r4, r1
 8001198:	b10a      	cbz	r2, 800119e <_printf_common+0x26>
 800119a:	3301      	adds	r3, #1
 800119c:	6033      	str	r3, [r6, #0]
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	0699      	lsls	r1, r3, #26
 80011a2:	bf42      	ittt	mi
 80011a4:	6833      	ldrmi	r3, [r6, #0]
 80011a6:	3302      	addmi	r3, #2
 80011a8:	6033      	strmi	r3, [r6, #0]
 80011aa:	6825      	ldr	r5, [r4, #0]
 80011ac:	f015 0506 	ands.w	r5, r5, #6
 80011b0:	d106      	bne.n	80011c0 <_printf_common+0x48>
 80011b2:	f104 0a19 	add.w	sl, r4, #25
 80011b6:	68e3      	ldr	r3, [r4, #12]
 80011b8:	6832      	ldr	r2, [r6, #0]
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	42ab      	cmp	r3, r5
 80011be:	dc26      	bgt.n	800120e <_printf_common+0x96>
 80011c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	3b00      	subs	r3, #0
 80011c8:	bf18      	it	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	0692      	lsls	r2, r2, #26
 80011ce:	d42b      	bmi.n	8001228 <_printf_common+0xb0>
 80011d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011d4:	4641      	mov	r1, r8
 80011d6:	4638      	mov	r0, r7
 80011d8:	47c8      	blx	r9
 80011da:	3001      	adds	r0, #1
 80011dc:	d01e      	beq.n	800121c <_printf_common+0xa4>
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	6922      	ldr	r2, [r4, #16]
 80011e2:	f003 0306 	and.w	r3, r3, #6
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf02      	ittt	eq
 80011ea:	68e5      	ldreq	r5, [r4, #12]
 80011ec:	6833      	ldreq	r3, [r6, #0]
 80011ee:	1aed      	subeq	r5, r5, r3
 80011f0:	68a3      	ldr	r3, [r4, #8]
 80011f2:	bf0c      	ite	eq
 80011f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011f8:	2500      	movne	r5, #0
 80011fa:	4293      	cmp	r3, r2
 80011fc:	bfc4      	itt	gt
 80011fe:	1a9b      	subgt	r3, r3, r2
 8001200:	18ed      	addgt	r5, r5, r3
 8001202:	2600      	movs	r6, #0
 8001204:	341a      	adds	r4, #26
 8001206:	42b5      	cmp	r5, r6
 8001208:	d11a      	bne.n	8001240 <_printf_common+0xc8>
 800120a:	2000      	movs	r0, #0
 800120c:	e008      	b.n	8001220 <_printf_common+0xa8>
 800120e:	2301      	movs	r3, #1
 8001210:	4652      	mov	r2, sl
 8001212:	4641      	mov	r1, r8
 8001214:	4638      	mov	r0, r7
 8001216:	47c8      	blx	r9
 8001218:	3001      	adds	r0, #1
 800121a:	d103      	bne.n	8001224 <_printf_common+0xac>
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	3501      	adds	r5, #1
 8001226:	e7c6      	b.n	80011b6 <_printf_common+0x3e>
 8001228:	18e1      	adds	r1, r4, r3
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	2030      	movs	r0, #48	@ 0x30
 800122e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001232:	4422      	add	r2, r4
 8001234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800123c:	3302      	adds	r3, #2
 800123e:	e7c7      	b.n	80011d0 <_printf_common+0x58>
 8001240:	2301      	movs	r3, #1
 8001242:	4622      	mov	r2, r4
 8001244:	4641      	mov	r1, r8
 8001246:	4638      	mov	r0, r7
 8001248:	47c8      	blx	r9
 800124a:	3001      	adds	r0, #1
 800124c:	d0e6      	beq.n	800121c <_printf_common+0xa4>
 800124e:	3601      	adds	r6, #1
 8001250:	e7d9      	b.n	8001206 <_printf_common+0x8e>
	...

08001254 <_printf_i>:
 8001254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001258:	7e0f      	ldrb	r7, [r1, #24]
 800125a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800125c:	2f78      	cmp	r7, #120	@ 0x78
 800125e:	4691      	mov	r9, r2
 8001260:	4680      	mov	r8, r0
 8001262:	460c      	mov	r4, r1
 8001264:	469a      	mov	sl, r3
 8001266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800126a:	d807      	bhi.n	800127c <_printf_i+0x28>
 800126c:	2f62      	cmp	r7, #98	@ 0x62
 800126e:	d80a      	bhi.n	8001286 <_printf_i+0x32>
 8001270:	2f00      	cmp	r7, #0
 8001272:	f000 80d2 	beq.w	800141a <_printf_i+0x1c6>
 8001276:	2f58      	cmp	r7, #88	@ 0x58
 8001278:	f000 80b9 	beq.w	80013ee <_printf_i+0x19a>
 800127c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001284:	e03a      	b.n	80012fc <_printf_i+0xa8>
 8001286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800128a:	2b15      	cmp	r3, #21
 800128c:	d8f6      	bhi.n	800127c <_printf_i+0x28>
 800128e:	a101      	add	r1, pc, #4	@ (adr r1, 8001294 <_printf_i+0x40>)
 8001290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001294:	080012ed 	.word	0x080012ed
 8001298:	08001301 	.word	0x08001301
 800129c:	0800127d 	.word	0x0800127d
 80012a0:	0800127d 	.word	0x0800127d
 80012a4:	0800127d 	.word	0x0800127d
 80012a8:	0800127d 	.word	0x0800127d
 80012ac:	08001301 	.word	0x08001301
 80012b0:	0800127d 	.word	0x0800127d
 80012b4:	0800127d 	.word	0x0800127d
 80012b8:	0800127d 	.word	0x0800127d
 80012bc:	0800127d 	.word	0x0800127d
 80012c0:	08001401 	.word	0x08001401
 80012c4:	0800132b 	.word	0x0800132b
 80012c8:	080013bb 	.word	0x080013bb
 80012cc:	0800127d 	.word	0x0800127d
 80012d0:	0800127d 	.word	0x0800127d
 80012d4:	08001423 	.word	0x08001423
 80012d8:	0800127d 	.word	0x0800127d
 80012dc:	0800132b 	.word	0x0800132b
 80012e0:	0800127d 	.word	0x0800127d
 80012e4:	0800127d 	.word	0x0800127d
 80012e8:	080013c3 	.word	0x080013c3
 80012ec:	6833      	ldr	r3, [r6, #0]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6032      	str	r2, [r6, #0]
 80012f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80012fc:	2301      	movs	r3, #1
 80012fe:	e09d      	b.n	800143c <_printf_i+0x1e8>
 8001300:	6833      	ldr	r3, [r6, #0]
 8001302:	6820      	ldr	r0, [r4, #0]
 8001304:	1d19      	adds	r1, r3, #4
 8001306:	6031      	str	r1, [r6, #0]
 8001308:	0606      	lsls	r6, r0, #24
 800130a:	d501      	bpl.n	8001310 <_printf_i+0xbc>
 800130c:	681d      	ldr	r5, [r3, #0]
 800130e:	e003      	b.n	8001318 <_printf_i+0xc4>
 8001310:	0645      	lsls	r5, r0, #25
 8001312:	d5fb      	bpl.n	800130c <_printf_i+0xb8>
 8001314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001318:	2d00      	cmp	r5, #0
 800131a:	da03      	bge.n	8001324 <_printf_i+0xd0>
 800131c:	232d      	movs	r3, #45	@ 0x2d
 800131e:	426d      	negs	r5, r5
 8001320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001324:	4859      	ldr	r0, [pc, #356]	@ (800148c <_printf_i+0x238>)
 8001326:	230a      	movs	r3, #10
 8001328:	e011      	b.n	800134e <_printf_i+0xfa>
 800132a:	6821      	ldr	r1, [r4, #0]
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	0608      	lsls	r0, r1, #24
 8001330:	f853 5b04 	ldr.w	r5, [r3], #4
 8001334:	d402      	bmi.n	800133c <_printf_i+0xe8>
 8001336:	0649      	lsls	r1, r1, #25
 8001338:	bf48      	it	mi
 800133a:	b2ad      	uxthmi	r5, r5
 800133c:	2f6f      	cmp	r7, #111	@ 0x6f
 800133e:	4853      	ldr	r0, [pc, #332]	@ (800148c <_printf_i+0x238>)
 8001340:	6033      	str	r3, [r6, #0]
 8001342:	bf14      	ite	ne
 8001344:	230a      	movne	r3, #10
 8001346:	2308      	moveq	r3, #8
 8001348:	2100      	movs	r1, #0
 800134a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800134e:	6866      	ldr	r6, [r4, #4]
 8001350:	60a6      	str	r6, [r4, #8]
 8001352:	2e00      	cmp	r6, #0
 8001354:	bfa2      	ittt	ge
 8001356:	6821      	ldrge	r1, [r4, #0]
 8001358:	f021 0104 	bicge.w	r1, r1, #4
 800135c:	6021      	strge	r1, [r4, #0]
 800135e:	b90d      	cbnz	r5, 8001364 <_printf_i+0x110>
 8001360:	2e00      	cmp	r6, #0
 8001362:	d04b      	beq.n	80013fc <_printf_i+0x1a8>
 8001364:	4616      	mov	r6, r2
 8001366:	fbb5 f1f3 	udiv	r1, r5, r3
 800136a:	fb03 5711 	mls	r7, r3, r1, r5
 800136e:	5dc7      	ldrb	r7, [r0, r7]
 8001370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001374:	462f      	mov	r7, r5
 8001376:	42bb      	cmp	r3, r7
 8001378:	460d      	mov	r5, r1
 800137a:	d9f4      	bls.n	8001366 <_printf_i+0x112>
 800137c:	2b08      	cmp	r3, #8
 800137e:	d10b      	bne.n	8001398 <_printf_i+0x144>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	07df      	lsls	r7, r3, #31
 8001384:	d508      	bpl.n	8001398 <_printf_i+0x144>
 8001386:	6923      	ldr	r3, [r4, #16]
 8001388:	6861      	ldr	r1, [r4, #4]
 800138a:	4299      	cmp	r1, r3
 800138c:	bfde      	ittt	le
 800138e:	2330      	movle	r3, #48	@ 0x30
 8001390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001394:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001398:	1b92      	subs	r2, r2, r6
 800139a:	6122      	str	r2, [r4, #16]
 800139c:	f8cd a000 	str.w	sl, [sp]
 80013a0:	464b      	mov	r3, r9
 80013a2:	aa03      	add	r2, sp, #12
 80013a4:	4621      	mov	r1, r4
 80013a6:	4640      	mov	r0, r8
 80013a8:	f7ff fee6 	bl	8001178 <_printf_common>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d14a      	bne.n	8001446 <_printf_i+0x1f2>
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b4:	b004      	add	sp, #16
 80013b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	4833      	ldr	r0, [pc, #204]	@ (8001490 <_printf_i+0x23c>)
 80013c4:	2778      	movs	r7, #120	@ 0x78
 80013c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6831      	ldr	r1, [r6, #0]
 80013ce:	061f      	lsls	r7, r3, #24
 80013d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80013d4:	d402      	bmi.n	80013dc <_printf_i+0x188>
 80013d6:	065f      	lsls	r7, r3, #25
 80013d8:	bf48      	it	mi
 80013da:	b2ad      	uxthmi	r5, r5
 80013dc:	6031      	str	r1, [r6, #0]
 80013de:	07d9      	lsls	r1, r3, #31
 80013e0:	bf44      	itt	mi
 80013e2:	f043 0320 	orrmi.w	r3, r3, #32
 80013e6:	6023      	strmi	r3, [r4, #0]
 80013e8:	b11d      	cbz	r5, 80013f2 <_printf_i+0x19e>
 80013ea:	2310      	movs	r3, #16
 80013ec:	e7ac      	b.n	8001348 <_printf_i+0xf4>
 80013ee:	4827      	ldr	r0, [pc, #156]	@ (800148c <_printf_i+0x238>)
 80013f0:	e7e9      	b.n	80013c6 <_printf_i+0x172>
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f023 0320 	bic.w	r3, r3, #32
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	e7f6      	b.n	80013ea <_printf_i+0x196>
 80013fc:	4616      	mov	r6, r2
 80013fe:	e7bd      	b.n	800137c <_printf_i+0x128>
 8001400:	6833      	ldr	r3, [r6, #0]
 8001402:	6825      	ldr	r5, [r4, #0]
 8001404:	6961      	ldr	r1, [r4, #20]
 8001406:	1d18      	adds	r0, r3, #4
 8001408:	6030      	str	r0, [r6, #0]
 800140a:	062e      	lsls	r6, r5, #24
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	d501      	bpl.n	8001414 <_printf_i+0x1c0>
 8001410:	6019      	str	r1, [r3, #0]
 8001412:	e002      	b.n	800141a <_printf_i+0x1c6>
 8001414:	0668      	lsls	r0, r5, #25
 8001416:	d5fb      	bpl.n	8001410 <_printf_i+0x1bc>
 8001418:	8019      	strh	r1, [r3, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	6123      	str	r3, [r4, #16]
 800141e:	4616      	mov	r6, r2
 8001420:	e7bc      	b.n	800139c <_printf_i+0x148>
 8001422:	6833      	ldr	r3, [r6, #0]
 8001424:	1d1a      	adds	r2, r3, #4
 8001426:	6032      	str	r2, [r6, #0]
 8001428:	681e      	ldr	r6, [r3, #0]
 800142a:	6862      	ldr	r2, [r4, #4]
 800142c:	2100      	movs	r1, #0
 800142e:	4630      	mov	r0, r6
 8001430:	f7fe fece 	bl	80001d0 <memchr>
 8001434:	b108      	cbz	r0, 800143a <_printf_i+0x1e6>
 8001436:	1b80      	subs	r0, r0, r6
 8001438:	6060      	str	r0, [r4, #4]
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	6123      	str	r3, [r4, #16]
 800143e:	2300      	movs	r3, #0
 8001440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001444:	e7aa      	b.n	800139c <_printf_i+0x148>
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	4632      	mov	r2, r6
 800144a:	4649      	mov	r1, r9
 800144c:	4640      	mov	r0, r8
 800144e:	47d0      	blx	sl
 8001450:	3001      	adds	r0, #1
 8001452:	d0ad      	beq.n	80013b0 <_printf_i+0x15c>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	079b      	lsls	r3, r3, #30
 8001458:	d413      	bmi.n	8001482 <_printf_i+0x22e>
 800145a:	68e0      	ldr	r0, [r4, #12]
 800145c:	9b03      	ldr	r3, [sp, #12]
 800145e:	4298      	cmp	r0, r3
 8001460:	bfb8      	it	lt
 8001462:	4618      	movlt	r0, r3
 8001464:	e7a6      	b.n	80013b4 <_printf_i+0x160>
 8001466:	2301      	movs	r3, #1
 8001468:	4632      	mov	r2, r6
 800146a:	4649      	mov	r1, r9
 800146c:	4640      	mov	r0, r8
 800146e:	47d0      	blx	sl
 8001470:	3001      	adds	r0, #1
 8001472:	d09d      	beq.n	80013b0 <_printf_i+0x15c>
 8001474:	3501      	adds	r5, #1
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	9903      	ldr	r1, [sp, #12]
 800147a:	1a5b      	subs	r3, r3, r1
 800147c:	42ab      	cmp	r3, r5
 800147e:	dcf2      	bgt.n	8001466 <_printf_i+0x212>
 8001480:	e7eb      	b.n	800145a <_printf_i+0x206>
 8001482:	2500      	movs	r5, #0
 8001484:	f104 0619 	add.w	r6, r4, #25
 8001488:	e7f5      	b.n	8001476 <_printf_i+0x222>
 800148a:	bf00      	nop
 800148c:	080015d8 	.word	0x080015d8
 8001490:	080015e9 	.word	0x080015e9

08001494 <memmove>:
 8001494:	4288      	cmp	r0, r1
 8001496:	b510      	push	{r4, lr}
 8001498:	eb01 0402 	add.w	r4, r1, r2
 800149c:	d902      	bls.n	80014a4 <memmove+0x10>
 800149e:	4284      	cmp	r4, r0
 80014a0:	4623      	mov	r3, r4
 80014a2:	d807      	bhi.n	80014b4 <memmove+0x20>
 80014a4:	1e43      	subs	r3, r0, #1
 80014a6:	42a1      	cmp	r1, r4
 80014a8:	d008      	beq.n	80014bc <memmove+0x28>
 80014aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014b2:	e7f8      	b.n	80014a6 <memmove+0x12>
 80014b4:	4402      	add	r2, r0
 80014b6:	4601      	mov	r1, r0
 80014b8:	428a      	cmp	r2, r1
 80014ba:	d100      	bne.n	80014be <memmove+0x2a>
 80014bc:	bd10      	pop	{r4, pc}
 80014be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014c6:	e7f7      	b.n	80014b8 <memmove+0x24>

080014c8 <_sbrk_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4d06      	ldr	r5, [pc, #24]	@ (80014e4 <_sbrk_r+0x1c>)
 80014cc:	2300      	movs	r3, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	f7ff fa2a 	bl	800092c <_sbrk>
 80014d8:	1c43      	adds	r3, r0, #1
 80014da:	d102      	bne.n	80014e2 <_sbrk_r+0x1a>
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	b103      	cbz	r3, 80014e2 <_sbrk_r+0x1a>
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	200001c4 	.word	0x200001c4

080014e8 <memcpy>:
 80014e8:	440a      	add	r2, r1
 80014ea:	4291      	cmp	r1, r2
 80014ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80014f0:	d100      	bne.n	80014f4 <memcpy+0xc>
 80014f2:	4770      	bx	lr
 80014f4:	b510      	push	{r4, lr}
 80014f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014fe:	4291      	cmp	r1, r2
 8001500:	d1f9      	bne.n	80014f6 <memcpy+0xe>
 8001502:	bd10      	pop	{r4, pc}

08001504 <_realloc_r>:
 8001504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001508:	4680      	mov	r8, r0
 800150a:	4615      	mov	r5, r2
 800150c:	460c      	mov	r4, r1
 800150e:	b921      	cbnz	r1, 800151a <_realloc_r+0x16>
 8001510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001514:	4611      	mov	r1, r2
 8001516:	f7ff bc4b 	b.w	8000db0 <_malloc_r>
 800151a:	b92a      	cbnz	r2, 8001528 <_realloc_r+0x24>
 800151c:	f7ff fbdc 	bl	8000cd8 <_free_r>
 8001520:	2400      	movs	r4, #0
 8001522:	4620      	mov	r0, r4
 8001524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001528:	f000 f81a 	bl	8001560 <_malloc_usable_size_r>
 800152c:	4285      	cmp	r5, r0
 800152e:	4606      	mov	r6, r0
 8001530:	d802      	bhi.n	8001538 <_realloc_r+0x34>
 8001532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001536:	d8f4      	bhi.n	8001522 <_realloc_r+0x1e>
 8001538:	4629      	mov	r1, r5
 800153a:	4640      	mov	r0, r8
 800153c:	f7ff fc38 	bl	8000db0 <_malloc_r>
 8001540:	4607      	mov	r7, r0
 8001542:	2800      	cmp	r0, #0
 8001544:	d0ec      	beq.n	8001520 <_realloc_r+0x1c>
 8001546:	42b5      	cmp	r5, r6
 8001548:	462a      	mov	r2, r5
 800154a:	4621      	mov	r1, r4
 800154c:	bf28      	it	cs
 800154e:	4632      	movcs	r2, r6
 8001550:	f7ff ffca 	bl	80014e8 <memcpy>
 8001554:	4621      	mov	r1, r4
 8001556:	4640      	mov	r0, r8
 8001558:	f7ff fbbe 	bl	8000cd8 <_free_r>
 800155c:	463c      	mov	r4, r7
 800155e:	e7e0      	b.n	8001522 <_realloc_r+0x1e>

08001560 <_malloc_usable_size_r>:
 8001560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001564:	1f18      	subs	r0, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	bfbc      	itt	lt
 800156a:	580b      	ldrlt	r3, [r1, r0]
 800156c:	18c0      	addlt	r0, r0, r3
 800156e:	4770      	bx	lr

08001570 <_init>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr

0800157c <_fini>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr
